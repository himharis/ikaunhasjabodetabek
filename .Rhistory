afr_formatted_death_num <- format(afr_total_case$total_deaths, big.mark = ",")
# Define the case distribution groups and colors
case_distribution <- list(
`10,000+` = list(color = "#b30000", countries = c("Democratic Republic of the Congo")),
`1,000-9,999` = list(color = "#e31a1c", countries = c("Nigeria", "Uganda")),
`100-999` = list(color = "#ff7f00", countries = c("Ghana", "Ivory Coast", "Central African Republic")),
`10-99` = list(color = "#fed976", countries = c("South Africa", "Republic of the Congo", "Cameroon", "Sudan", "Kenya", "Liberia")),
`<10` = list(color = "#ffffb3", countries = c("Mozambique", "Morocco", "Gabon", "Rwanda", "Benin", "Egypt", "Angola", "Zambia", "Zimbabwe", "Guinea"))
)
# Create a data frame for Plotly
countries <- unlist(lapply(case_distribution, function(x) x$countries))
colors <- rep(sapply(case_distribution, function(x) x$color), sapply(case_distribution, function(x) length(x$countries)))
labels <- rep(names(case_distribution), sapply(case_distribution, function(x) length(x$countries)))
# Assign numeric values in the correct order
label_levels <- as.factor(c("10,000+", "1,000-9,999", "100-999", "10-99", "<10"))
df <- data.frame(
Country = countries,
Color = colors,
Label = factor(labels, levels = label_levels)  # Convert labels to factor with specified order
)
# Join the mpox data with the world map data
africa_mpox <- world %>%
left_join(df, by = c("admin" = "Country"))
# Let's try a different approach using geojson
africa_mpox_geojson <- sf::st_transform(africa_mpox, 4326)
africa_geojson_data <- jsonlite::toJSON(sf::st_geometry(africa_mpox_geojson))
# Alternative approach using sf to convert to dataframe
africa_mpox_df <- sf::st_cast(africa_mpox, "MULTIPOLYGON")
# Add ID column for matching
africa_mpox_df$id <- 1:nrow(africa_mpox_df)
# Extract centroids for labels
africa_centroids <- sf::st_centroid(africa_mpox_df)
africa_centroids_coords <- sf::st_coordinates(africa_centroids)
africa_mpox_df$lon <- africa_centroids_coords[, "X"]
africa_mpox_df$lat <- africa_centroids_coords[, "Y"]
# Create a clean data frame for plotting
africa_plot_data <- africa_mpox_df %>%
sf::st_drop_geometry() %>%
select(id, admin, Label, lon, lat, Color) %>%
filter(!is.na(admin) & !is.na(Label) & !is.na(lon) & !is.na(lat) & !is.na(Color))
# Create a named color vector for Plotly
color_vector <- setNames(unique(df$Color), unique(df$Label))
# Create a choropleth map
fig <- plot_geo() %>%
add_trace(
z = ~as.numeric(factor(africa_plot_data$Label, levels = label_levels)),
text = ~paste(africa_plot_data$admin, ": ", africa_plot_data$Label),
locations = ~africa_plot_data$admin,
locationmode = "country names",
colors = color_vector,  # Use the named color vector
colorscale = lapply(1:length(color_vector), function(i) {
list(
(i-1)/(length(color_vector)-1),
color_vector[i]
)
}),
colorbar = list(
title = "",
tickvals = 1:length(color_vector) - 0.5,
ticktext = names(color_vector)
),
marker = list(line = list(color = "#555555", width = 0.1)),
showscale = TRUE,
hoverinfo = "text"
) %>%
layout(
title = list(
text = paste0("Distribution of Mpox Cases in the African Region<br><sup>", cdate,"</sup>"),
font = list(size = 18)
),
geo = list(
showland = TRUE,
scope = "africa",
landcolor = "#E8E8E8",
showframe = TRUE,
showcountries = TRUE,
countrycolor = "#555555",
countrywidth = 0.3,
projection = list(type = "natural earth"),
showcoastlines = FALSE,
coastlinecolor = "black",
coastlinewidth = 0.1,
showlakes = TRUE,
lakecolor = "lightblue"
),
margin = list(l = 0, r = 0, t = 35, b = 0)
)
# Display the map
fig
#| title: Trend of Mpox in African Countries
library(highcharter)
library(dplyr)
library(RColorBrewer)
# Filter out countries with NA or zero values in 'new_cases'
african_data_filtered <- african_data %>%
filter(!is.na(new_cases) & new_cases > 0)
# Calculate the total cases for each country
country_totals <- african_data_filtered %>%
group_by(location) %>%
summarize(total_cases = sum(new_cases, na.rm = TRUE)) %>%
filter(total_cases > 0) %>%  # Only keep countries with cases
arrange(desc(total_cases))
# Get a contrasting color palette
n_colors <- nrow(country_totals)
color_palette <- brewer.pal(min(n_colors, 12), "Paired")  # "Paired" gives a good contrast
# If we have more than 12 countries, we'll repeat colors
color_palette <- colorRampPalette(color_palette)(n_colors)
# Create the highchart plot
mpox_plot <- highchart() %>%
hc_yAxis_multiples(
list(title = list(text = "No. of Cases")),
list(showLastLabel = FALSE)
) %>%
hc_add_series(
data = african_data_filtered %>% filter(location %in% country_totals$location),
type = "area",
hcaes(x = week, y = new_cases, group = location)
) %>%
hc_xAxis(
dateTimeLabelFormats = list(month = "%b '%y"),
type = "datetime"
) %>%
hc_plotOptions(
series = list(marker = list(enabled = FALSE), stacking = "stream")
) %>%
hc_colors(color_palette) %>%
hc_title(text = paste0("Weekly New Mpox Cases in African Countries as of ", format(Sys.Date(), "%B %d, %Y"))) %>%
hc_subtitle(text = "Weekly new cases") %>%
hc_tooltip(
shared = TRUE,
headerFormat = "<span style='font-size: 10px'>Week of {point.x:%b %d, %Y}</span><br/>",
pointFormat = "<span style='color:{point.color}'>\u25CF</span> {series.name}: <b>{point.y}</b><br/>"
) %>%
hc_legend(
enabled = TRUE,
layout = "horizontal",
align = "center",
verticalAlign = "bottom",
alignColumns = FALSE,
labelFormatter = JS(paste0(
"function() { ",
"var totals = ", jsonlite::toJSON(country_totals), ";",
"var country = totals.find(c => c.location === this.name);",
"if (country) {",
"  return this.name ",
"} else {",
"  return null;", # This will hide the label
"}",
"}"
))
)
# Display the plot
mpox_plot
#| title: Weekly Trend of Mpox in African Countries (2022-2025)
library(plotly)
library(dplyr)
# Define the country names
country_names <- c(
"BDI" = "Burundi", "CMR" = "Cameroon", "CAF" = "Central African Republic",
"COG" = "Congo", "COD" = "Democratic Republic of the Congo",
"CIV" = "Ivory Coast (CÃ´te d'Ivoire)", "KEN" = "Kenya", "LBR" = "Liberia",
"NGA" = "Nigeria", "RWA" = "Rwanda", "ZAF" = "South Africa",
"UGA" = "Uganda"
)
# Filter data
african_data_filtered <- data %>%
filter(iso_code %in% names(country_names), new_cases >= 0)
# Initialize plot list
plot_list <- list()
# Loop through countries
for (iso_code in names(country_names)) {
country_data <- african_data_filtered %>% filter(iso_code == !!iso_code)
afr_p <- plot_ly(country_data, x = ~date, y = ~new_cases,
type = 'scatter', mode = 'lines',
line = list(color = 'blue'),
name = "",
hoverinfo = "x+y") %>%
layout(
xaxis = list(
title = "Date",
tickangle = -45,
type = 'date',
tickformat = "%b %Y",
automargin = TRUE
),
yaxis = list(
title = "New Cases",
automargin = TRUE
),
margin = list(t = 80, b = 30)  # Reduced margin for annotations
)
plot_list[[iso_code]] <- afr_p
}
# Create subplot grid (4 rows x 3 columns)
final_plot <- subplot(
plot_list,
nrows = 4,
shareX = TRUE,
shareY = FALSE,
margin = 0.05
)
# Calculate annotation positions for 4x3 grid
ncols <- 3
nrows <- 4
annotations <- list()
for (i in 1:length(plot_list)) {
row <- ceiling(i/ncols)
col <- ifelse(i %% ncols == 0, ncols, i %% ncols)
annotations[[i]] <- list(
x = (col - 0.5)/ncols,
y = 1 - ((row - 0.88)/nrows),
text = country_names[[i]],
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE,
font = list(size = 12)
)
}
# Add main title and annotations
final_plot <- final_plot %>% layout(
title = list(
text = paste0("Weekly Trend of New Mpox Cases in African Countries (2022-2025)<br><sup>", cdate, "</sup>"),
x = 0.5,
y = 0.93,
font = list(size = 20)
),
margin = list(t = 80, b = 80),
annotations = annotations,
showlegend = FALSE
)
# Display the final interactive dashboard
final_plot
# Read the data
aseanMpox <- readxl::read_excel("20250624_computation_covid_19_mpox.xlsx",
sheet = "Mpox", skip= 10, col_names = TRUE)
aseanMpox <- aseanMpox %>% mutate(`Cumulative Cases` = (as.integer(`cases 2023-2024-2025`)),
`Cumulative Deaths` = (as.integer(`Cumulative Deaths`)),
CFR = as.numeric(`CFR 2023&2024`)
)
aseanMpox_data <- subset(aseanMpox, select = c("AMS", "Cumulative Cases","New_cases", "Cumulative Deaths", "New_deaths", "CFR"))
aseanMpox_data$CFR <- paste0(round(aseanMpox_data$CFR * 100, 2) , "%")
even_rows <- aseanMpox_data[seq(2, nrow(aseanMpox_data), by = 2), ]
asean_mpox_total_case <- aseanMpox_data %>%
filter(AMS == "Total") %>%
pull(`Cumulative Cases`)
asean_mpox_total_case <- asean_mpox_total_case
asean_mpox_total_death <- aseanMpox_data %>%
filter(AMS == "Total") %>%
pull(`Cumulative Deaths`)
asean_mpox_total_death <- asean_mpox_total_death
asean_mpox_total_cfr <- aseanMpox_data %>%
filter(AMS == "Total") %>%
pull(CFR)
asean_mpox_total_cfr <- asean_mpox_total_cfr
asean_formatted_case_num <- format(asean_mpox_total_case, big.mark = ",")
asean_cfr <- format(asean_mpox_total_cfr)
asean_death <- format(asean_mpox_total_death)
# Read the data
asean_mpox_only <- readxl::read_excel("distribution mpox variants.xlsx",
sheet = 3, col_names = TRUE)
# Define colors for the map
asean_mpox_colors <- c(
"Clade II" = "#073763",
"No confirmed case" = "#E97132",
"Clade Ib and II" = "#4E95D9",
"No report" = "#808080"
)
# Add color column based on the Label
asean_mpox_only <- asean_mpox_only %>%
mutate(color = case_when(
Label == "Clade II" ~ "#073763",
Label == "Clade Ib and II" ~ "#4E95D9",
Label == "No confirmed case" ~ "#E97132",
Label == "No report" ~ "#808080"
))
# Join the ASEAN mpox data with the world map data
asean_mpox <- world %>%
left_join(asean_mpox_only, by = c("admin" = "Country"))
# Transform the data to GeoJSON format
asean_mpox_geojson <- sf::st_transform(asean_mpox, 4326)
# Convert to a data frame for plotting
asean_mpox_df <- sf::st_cast(asean_mpox, "MULTIPOLYGON")
asean_mpox_df$id <- 1:nrow(asean_mpox_df)  # Add ID column for matching
# Extract centroids for labels
asean_centroids <- sf::st_centroid(asean_mpox_df)
asean_centroids_coords <- sf::st_coordinates(asean_centroids)
asean_mpox_df$lon <- asean_centroids_coords[, "X"]
asean_mpox_df$lat <- asean_centroids_coords[, "Y"]
# Create a clean data frame for plotting
asean_plot_data <- asean_mpox_df %>%
sf::st_drop_geometry() %>%
select(id, admin, Label, lon, lat, color) %>%
filter(!is.na(admin) & !is.na(Label) & !is.na(lon) & !is.na(lat) & !is.na(color))
# Create a named color vector for Plotly
asean_color_vector <- setNames(unique(asean_plot_data$color), unique(asean_plot_data$Label))
# Create a choropleth map
ap <- plot_geo() %>%
add_trace(
z = ~as.numeric(factor(asean_plot_data$Label, levels = names(asean_mpox_colors))),
text = ~paste(asean_plot_data$admin, ": ", asean_plot_data$Label),
locations = ~asean_plot_data$admin,
locationmode = "country names",
colors = asean_mpox_colors,  # Use the predefined color vector
colorbar = list(
title = "",
tickvals = 1:length(asean_mpox_colors),
ticktext = names(asean_mpox_colors)
),
marker = list(line = list(color = "#555555", width = 0.1)),
showscale = TRUE,
hoverinfo = "text"
) %>%
layout(
title = list(
text = paste0("Distribution of Mpox variant (Clade) in the ASEAN and Neighbouring Countries/Areas<br><sup>", cdate, "</sup>"),
font = list(size = 18)
),
geo = list(
showland = TRUE,
scope = "asia",
landcolor = "#ffffff",
showframe = FALSE,
showcountries = TRUE,
countrycolor = "white",
countrywidth = 0.3,
projection = list(type = "natural earth"),
showcoastlines = FALSE,
coastlinecolor = "white",
coastlinewidth = 0.1,
showlakes = TRUE,
lakecolor = "white"
),
margin = list(l = 0, r = 0, t = 35, b = 0)
)
# Display the map
ap
#| title: Distribution of mpox cases in ASEAN Region 2023-2025
# Generate the table with colored header, last row, column borders, and header border
aseanMpox_data |>
kable(align = c("l", "c", "c", "c", "c", "c"), caption = "Table 1. Number of confirmed mpox cases and deaths in ASEAN") |>
kable_styling(bootstrap_options = c("hover", "striped"), full_width = FALSE) |>
row_spec(0, background = "#ADD8E6", bold = TRUE) |> #, extra_css = "border: 1px solid #000000;") |>  # Add border to the header row
row_spec(nrow(aseanMpox_data), background = "#ADD8E6", bold = TRUE) |>  #extra_css = "border: 1px solid #000000;") |>  # Color the last row
#column_spec(1, border_right = "1px solid #000000", border_left = "1px solid #000000") |>  # Add borders to the first column
#column_spec(2, border_right = "1px solid #000000", border_left = "1px solid #000000") |>  # Add borders to the second column
#column_spec(3, border_right = "1px solid #000000", border_left = "1px solid #000000") |>  # Add borders to the third column
#column_spec(4, border_right = "1px solid #000000", border_left = "1px solid #000000") |>  # Add borders to the fourth column
#column_spec(5, border_right = "1px solid #000000", border_left = "1px solid #000000") |>  # Add borders to the fifth column
#column_spec(6, border_right = "1px solid #000000", border_left = "1px solid #000000") |>  # Add borders to the fifth column
footnote(
number = c("WHO Mpox Outbreak: Global Trends;", "Ministry of Health Cambodia;", "Ministry of Health Republic of Indonesia;", "Ministry of Health Singapore.")
)
#| title: Trend of Mpox in the ASEAN Region
asean_data <- data |>
filter(iso_code %in% c("BRN", "KHM", "IDN", "LAO", "PHL", "THA", "VNM", "MMR", "SGP", "MYS")) |>
arrange(location, date) |>
mutate(
date = as.Date(date),
month = floor_date(date, "month"),
# Set factor levels in descending order
location = factor(location, levels = rev(sort(unique(location))))
) |>
group_by(location, month) |>
summarise(confirmed_cases = sum(new_cases, na.rm = TRUE)) |>
ungroup()
# Manually reverse the color palette to match descending order
n_countries <- length(unique(asean_data$location))
color_palette <- RColorBrewer::brewer.pal(n_countries, "Set1")
reversed_palette <- rev(color_palette)
asean_trend_plotly <- plot_ly(
asean_data,
x = ~month,
y = ~confirmed_cases,
color = ~location,
colors = reversed_palette,
type = "bar"
) |>
layout(
title = "Confirmed Cases in ASEAN Countries",
xaxis = list(
title = "Date",
type = "date",
tickformat = "%b %y",
range = c("2022-06-01", "2025-05-20")
),
yaxis = list(title = "Confirmed Cases"),
barmode = "stack",
legend = list(title = list(text = ""), font = list(size = 14))
)
asean_trend_plotly
#| title: Trends of mpox among ASEAN Member States
asean_data$year <- as.double(format(asean_data$month, "%Y"))
# Manual addition to asean data
new_row <- data.frame(
location = c("Malaysia"),
month = as.Date(c("2025-04-01")),
confirmed_cases = c(1),
year = 2025)
new_row2 <- data.frame(
location = "Singapore",
month = as.Date("2025-03-01"),
confirmed_cases = 1,
year = 2025)
# Bind the new row to the african_data dataframe
asean_data <- bind_rows(asean_data, new_row, new_row2)
colors <- c("2022" = "salmon", "2023" = "chartreuse3",
"2024" = "royalblue", "2025" = "yellow")
# Ensure year is converted to character before plotting
create_plot <- function(country_name, show_legend = FALSE) {
asean_data %>%
filter(location == country_name) %>%
# Explicitly convert year to character
mutate(year = as.character(year)) %>%
plot_ly(x = ~month,
y = ~confirmed_cases,
color = ~year,  # No need for as.character() here now
type = 'bar',
colors = c("2022" = "salmon", "2023" = "chartreuse3",
"2024" = "royalblue", "2025" = "yellow"),
legendgroup = ~year,
showlegend = show_legend) %>%
layout(barmode = "stack",
xaxis = list(title = "Date",
tickformat = "%b %y",
tickangle = -45,
tickvals = seq(min(asean_data$month),
max(asean_data$month),
by = "5 months")),
yaxis = list(title = ""),
legend = list(orientation = 'h'))
}
# Rest of the code remains the same
country_order <- c("Cambodia", "Indonesia", "Laos", "Malaysia",
"Philippines", "Singapore", "Thailand", "Vietnam")
plots <- lapply(seq_along(country_order), function(i) {
create_plot(country_order[i], show_legend = (i == 2))
})
fig <- subplot(plots, nrows = 2, shareX = TRUE, shareY = FALSE,
titleX = FALSE, margin = 0.04, heights = c(0.45, 0.45)) %>%
layout(plot_bgcolor = "white",
margin = list(t = 40, b = 40),
showlegend = TRUE,
legend = list(x = 0.3, y = 1.1))
# Annotations code
annotations <- list()
for(i in 1:8) {
col <- (i - 1) %% 4
row <- (i - 1) %/% 4
annotations[[i]] <- list(
x = col/4 + 0.125,
y = 1 - (row/2 + 0.0000001),
text = country_order[i],
xref = "paper",
yref = "paper",
xanchor = "center",
showarrow = FALSE,
font = list(size = 14)
)
}
fig <- fig %>% layout(
annotations = c(annotations, list(
list(
x = 0.5,
y = -0.1,
text = "",
showarrow = FALSE,
xref = "paper",
yref = "paper",
font = list(size = 14)
),
list(
x = -0.05,
y = 0.5,
text = "Confirmed Cases",
textangle = -90,
showarrow = FALSE,
xref = "paper",
yref = "paper",
font = list(size = 14)
)
))
)
fig
View(african_data)
# Define the case distribution groups and colors
case_distribution <- list(
`10,000+` = list(color = "#b30000", countries = c("Democratic Republic of the Congo")),
`1,000-9,999` = list(color = "#e31a1c", countries = c("Nigeria", "Uganda", "Burundi", "Sierra Leone")),
`100-999` = list(color = "#ff7f00", countries = c("Ghana", "Ivory Coast", "Central African Republic", "Liberia", "Kenya", "Rwanda")),
`10-99` = list(color = "#fed976", countries = c("South Africa", "Republic of the Congo", "Cameroon", "Sudan", "South Sudan", "Angola", "Zambia")),
`<10` = list(color = "#ffffb3", countries = c("Mozambique", "Morocco", "Gabon", "Benin", "Egypt", "Zimbabwe", "Guinea", "Ethiopia", "Togo", "Malawi", "Mauritius"))
)
# Create a data frame for Plotly
countries <- unlist(lapply(case_distribution, function(x) x$countries))
colors <- rep(sapply(case_distribution, function(x) x$color), sapply(case_distribution, function(x) length(x$countries)))
labels <- rep(names(case_distribution), sapply(case_distribution, function(x) length(x$countries)))
# Assign numeric values in the correct order
label_levels <- as.factor(c("10,000+", "1,000-9,999", "100-999", "10-99", "<10"))
df <- data.frame(
Country = countries,
Color = colors,
Label = factor(labels, levels = label_levels)  # Convert labels to factor with specified order
)
# Join the mpox data with the world map data
africa_mpox <- world %>%
left_join(df, by = c("admin" = "Country"))
View(world)
View(df)
gc()
setwd("C:/Users/ASUS/OneDrive/GitHub/ABVC_CODE/IkaUnhasJabodetabek")
